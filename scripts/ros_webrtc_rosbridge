#!/usr/bin/env python
"""
ROS node adapting a `RTCDataChannel` to ROS protocol. This is called a
*rosbridge* and is done using the `rosbridge_library`.

Typically spawn one of these nodes for **each** `RTCDataChannel` you want to
convert to a bridge, like e.g.:

.. code:: python

    from ros_webrtc.peer_connection import rosbridge_node
    
    node = rosbridge_node(
        '{my-label}',
        '{my-session-id}',
        '{my-peer-id}',
        output='screen',
    )
    launch = roslaunch.scriptapi.ROSLaunch()
    launch.start()
    launch.launch(node)

where:

- `{my-label}`
- `{my-session-id}` and
- `{my-peer-id}`

identify **your** side of the `RTCDataChannel`.

"""
import array
import os
import StringIO
import struct
import threading
import time

import bondpy.bondpy
from ros_webrtc import join_ros_names
import ros_webrtc.msg
import ros_webrtc.srv
import rosbridge_library.rosbridge_protocol
import rospy


class DataChannelBridge(object):

    @classmethod
    def generate_client_id(cls):
        return struct.unpack("!Q", os.urandom(8))[0]

    def __init__(
            self,
            label,
            session_id,
            peer_id,
            ros_webrtc_namespace=None,
            client_id=None,
            queue_size=1000,
            persistent_send=True):
        self.label = label
        self.session_id = session_id
        self.peer_id = peer_id
        self.subscriber = rospy.Subscriber(
            join_ros_names(
                ros_webrtc_namespace,
                'session_{0}'.format(self.session_id),
                'peer_{0}'.format(self.peer_id),
                'data_{0}'.format(self.label),
            ),
            ros_webrtc.msg.Data,
            self._recv,
        )
        self.send = rospy.ServiceProxy(
            join_ros_names(ros_webrtc_namespace, 'send_data'),
            ros_webrtc.srv.SendData,
            persistent=persistent_send,
        )
        self.send_lock = threading.Lock()
        self.protocol = rosbridge_library.rosbridge_protocol.RosbridgeProtocol(
            client_id=(
                client_id
                if client_id is not None
                else self.generate_client_id()
            )
        )
        self.protocol.outgoing = self._send
        self.bond = bondpy.bondpy.Bond(
            topic='rosbridge_bond',
            id='_'.join([
                self.session_id, self.label, self.peer_id
            ]),
            on_broken=self._on_bond_broken,
            on_formed=self._on_bond_formed,
        )

    def __str__(self):
        return '{0}(label="{1}", session_id="{2}", peer_id="{3}", bond.id={4})'.format(
            type(self).__name__,
            self.label,
            self.session_id,
            self.peer_id,
            '"{0}"'.format(self.bond.id) if self.bond else None,
        )

    def wait_for_recv(self, timeout=5.0, poll_freq=1.0):
        rospy.loginfo(
            '%s wait_for_recv - timeout=%0.4f, poll_freq=%0.4f',
            self, timeout, poll_freq,
        )
        stared_at = time.time()
        expire_at = time.time() + timeout
        while self.subscriber and self.subscriber.get_num_connections() == 0:
            if time.time() >= expire_at:
                rospy.loginfo(
                    '%s wait_for_recv - expired after %0.4f sec(s)',
                    self, time.time() - stared_at
                )
                return False
            time.sleep(poll_freq)
        if not self.subscriber:
            rospy.loginfo(
                '%s wait_for_recv - shutdown after %0.4f sec(s)',
                self, time.time() - stared_at,
            )
            return False
        rospy.loginfo(
            '%s wait_for_recv - succeeded after %0.4f sec(s)',
            self, time.time() - stared_at,
        )
        return True

    def teardown(self):
        if self.bond:
            if getattr(self.bond, 'sub', None):
                self.bond.shutdown()
            self.bond = None
        if self.protocol is not None:
            self.protocol.finish()
            self.protocol = None
        if self.subscriber is not None:
            self.subscriber.unregister()
            self.subscriber = None
        if self.send is not None:
            self.send.close()
            self.send = None

    def _send(self, msg):
        rospy.logdebug('%s sending - size=%s', self, len(msg))
        data = ros_webrtc.msg.Data(
            label=self.label,
            encoding='utf-8',
            buffer=array.array('B', msg).tolist() or []
        )
        with self.send_lock:
            self.send(
                session_id=self.session_id,
                peer_id=self.peer_id,
                data=data
            )

    def _recv(self, msg):
        rospy.logdebug(
            '%s recv - encoding=%s, buffer.size=%s',
            self, msg.encoding, len(msg.buffer)
        )
        message_string = StringIO.StringIO(bytearray(msg.buffer)).getvalue()
        self.protocol.incoming(message_string)

    def _on_bond_formed(self):
        rospy.loginfo('%s bond formed', self)

    def _on_bond_broken(self):
        rospy.loginfo('%s bond broken, shutting down ...', self)
        rospy.signal_shutdown('bond broken')


def main():
    dcb = None

    def shutdown():
        if dcb:
            dcb.teardown()
        rospy.delete_param(rospy.get_name())

    rospy.init_node('rosbridge')

    rospy.on_shutdown(shutdown)

    dcb = DataChannelBridge(
        label=str(rospy.get_param('~label')),
        session_id=str(rospy.get_param('~session_id')),
        peer_id=str(rospy.get_param('~peer_id')),
        queue_size=int(rospy.get_param('~queue_size', 1000)),
        persistent_send=bool(rospy.get_param('~persistent_send', True)),
        ros_webrtc_namespace=rospy.get_param('~ros_webrtc_ns', None),
    )

    wait_for_recv = rospy.get_param('~wait_for_recv', 5.0)
    if wait_for_recv:
        if not dcb.wait_for_recv(float(wait_for_recv)):
            raise RuntimeError(
                'No publisher for {0} after {1} sec(s).'
                .format(dcb, wait_for_recv)
            )

    if rospy.has_param('heartbeat_timeout'):
        dcb.bond.heartbeat_timeout = float(rospy.has_param('heartbeat_timeout'))

    dcb.bond.start()

    rospy.spin()


if __name__ == '__main__':
    main()
